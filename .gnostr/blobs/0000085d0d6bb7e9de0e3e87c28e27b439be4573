commit 0000085d0d6bb7e9de0e3e87c28e27b439be4573
Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
Date:   Sun Jul 16 09:43:30 2023 -0400

    03:0005164a:

diff --git a/src/gitminer.rs b/src/gitminer.rs
index 18c4c71..21752ac 100644
--- a/src/gitminer.rs
+++ b/src/gitminer.rs
@@ -70,9 +70,17 @@ impl Gitminer {
     }
 
     fn write_commit(&self, hash: &String, blob: &String) -> Result<(), &'static str> {
+
+        Command::new("sh")
+            .arg("-c")
+            .arg(format!("mkdir -p {}.gnostr/{} && ", self.opts.repo, hash))
+            .output()
+            .ok()
+            .expect("Failed to generate commit");
+
         /* repo.blob() generates a blob, not a commit.
          * don't know if there's a way to do this with libgit2. */
-        let tmpfile  = format!("/tmp/{}.tmp", hash);
+        let tmpfile  = format!("/tmp/{}.tmp",hash);
         let mut file = File::create(&Path::new(&tmpfile))
             .ok()
             .expect(&format!("Failed to create temporary file {}", &tmpfile));
@@ -87,13 +95,22 @@ impl Gitminer {
             .output()
             .ok()
             .expect("Failed to generate commit");
-//
+
         Command::new("sh")
             .arg("-c")
-            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
+            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
             .output()
             .ok()
-            .expect("Failed to generate commit");
+            .expect("Failed to write .gnostr/blobs/<hash>");
+
+
+///
+//        Command::new("sh")
+//            .arg("-c")
+//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
+//            .output()
+//            .ok()
+//            .expect("Failed to generate commit");
 
         Ok(())
     }
