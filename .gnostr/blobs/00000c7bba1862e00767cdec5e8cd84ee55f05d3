commit 00000c7bba1862e00767cdec5e8cd84ee55f05d3
Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
Date:   Sun Jul 16 09:51:48 2023 -0400

    02:0000c300:

diff --git a/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
new file mode 100644
index 00000000..a99f552
--- /dev/null
+++ b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
@@ -0,0 +1,34 @@
+commit 00000074d9f399f76a45b9eb89c03941630359aa
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 09:50:00 2023 -0400
+
+    01:000cf4e5:
+
+diff --git a/src/main.rs b/src/main.rs
+index 4838731..fe319ac 100644
+--- a/src/main.rs
++++ b/src/main.rs
+@@ -70,20 +70,20 @@ fn main() -> io::Result<()> {
+         if cfg!(target_os = "macos"){
+         Command::new("sh")
+                 .arg("-c")
+-                .arg("git diff")
++                .arg("gnostr-git diff")
+                 .output()
+                 .expect("failed to execute process")
+         } else
+         if cfg!(target_os = "linux"){
+         Command::new("sh")
+                 .arg("-c")
+-                .arg("git diff")
++                .arg("gnostr-git diff")
+                 .output()
+                 .expect("failed to execute process")
+         } else {
+         Command::new("sh")
+                 .arg("-c")
+-                .arg("git diff")
++                .arg("gnostr-git diff")
+                 .output()
+                 .expect("failed to execute process")
+         };
diff --git a/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573 b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
new file mode 100644
index 00000000..b2bb142
--- /dev/null
+++ b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
@@ -0,0 +1,55 @@
+commit 0000085d0d6bb7e9de0e3e87c28e27b439be4573
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 09:43:30 2023 -0400
+
+    03:0005164a:
+
+diff --git a/src/gitminer.rs b/src/gitminer.rs
+index 18c4c71..21752ac 100644
+--- a/src/gitminer.rs
++++ b/src/gitminer.rs
+@@ -70,9 +70,17 @@ impl Gitminer {
+     }
+ 
+     fn write_commit(&self, hash: &String, blob: &String) -> Result<(), &'static str> {
++
++        Command::new("sh")
++            .arg("-c")
++            .arg(format!("mkdir -p {}.gnostr/{} && ", self.opts.repo, hash))
++            .output()
++            .ok()
++            .expect("Failed to generate commit");
++
+         /* repo.blob() generates a blob, not a commit.
+          * don't know if there's a way to do this with libgit2. */
+-        let tmpfile  = format!("/tmp/{}.tmp", hash);
++        let tmpfile  = format!("/tmp/{}.tmp",hash);
+         let mut file = File::create(&Path::new(&tmpfile))
+             .ok()
+             .expect(&format!("Failed to create temporary file {}", &tmpfile));
+@@ -87,13 +95,22 @@ impl Gitminer {
+             .output()
+             .ok()
+             .expect("Failed to generate commit");
+-//
++
+         Command::new("sh")
+             .arg("-c")
+-            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+             .output()
+             .ok()
+-            .expect("Failed to generate commit");
++            .expect("Failed to write .gnostr/blobs/<hash>");
++
++
++///
++//        Command::new("sh")
++//            .arg("-c")
++//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++//            .output()
++//            .ok()
++//            .expect("Failed to generate commit");
+ 
+         Ok(())
+     }
