commit 000006be2b9b98413f841867276fe0ea3d65e5bb
Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
Date:   Sun Jul 16 13:03:09 2023 -0400

    00:0001550a:.gnostr/blobs: add new blobs

diff --git a/.gnostr/blobs/00000568b8bf31f68bb1ca992f52d23cb4d8e999 b/.gnostr/blobs/00000568b8bf31f68bb1ca992f52d23cb4d8e999
new file mode 100644
index 00000000..d997dc7
--- /dev/null
+++ b/.gnostr/blobs/00000568b8bf31f68bb1ca992f52d23cb4d8e999
@@ -0,0 +1,94 @@
+commit 00000568b8bf31f68bb1ca992f52d23cb4d8e999
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 12:57:40 2023 -0400
+
+    02:00000ceb:struct Gitminer add relays
+
+diff --git a/src/gitminer.rs b/src/gitminer.rs
+index f330ca2..f2efe53 100644
+--- a/src/gitminer.rs
++++ b/src/gitminer.rs
+@@ -13,13 +13,14 @@ pub struct Options {
+     pub target:    String,
+     pub message:   String,
+     pub repo:      String,
+-    pub timestamp: time::Tm,
++    pub timestamp: time::Tm
+ }
+ 
+ pub struct Gitminer {
+     opts:   Options,
+     repo:   git2::Repository,
+-    author: String
++    author: String,
++    pub relays: String
+ }
+ 
+ 
+@@ -32,11 +33,13 @@ impl Gitminer {
+         };
+ 
+         let author = Gitminer::load_author(&repo)?;
++        let relays = Gitminer::load_gnostr_relays(&repo)?;
+ 
+         Ok(Gitminer {
+             opts:   opts,
+             repo:   repo,
+-            author: author
++            author: author,
++            relays: relays
+         })
+     }
+ 
+@@ -105,18 +108,26 @@ impl Gitminer {
+         //write the blob
+         Command::new("sh")
+             .arg("-c")
+-            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
++            .arg(format!("cd {} && mkdir -p .gnostr && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+             .output()
+             .ok()
+             .expect("Failed to write .gnostr/blobs/<hash>");
+         //add the blob
+         //Command::new("sh")
+         //    .arg("-c")
+-        //    .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
++        //    .arg(format!("cd {} && mkdir -p .gnostr/blobs && git add .gnostr/blobs/{}", self.opts.repo, hash))
+         //    .output()
+         //    .ok()
+         //    .expect("Failed to git add .gnostr/blobs/<hash>");
+-
++//REF:
++//gnostr-git reflog      --format='wss://${RELAY}/${REPO}/%C(auto)%H/%<|(17)%gdcommit:%s'
++        //write the reflog
++        Command::new("sh")
++            .arg("-c")
++            .arg(format!("cd {} && mkdir -p .gnostr/reflog && touch -f .gnostr/reflog/{} && git reflog --format='wss://{}/{}/%C(auto)%H/%<|(17)%gdcommit:%s' > .gnostr/reflog/{}", self.relays, self.opts.repo,self.opts.repo, hash, hash))
++            .output()
++            .ok()
++            .expect("Failed to write .gnostr/reflog/<hash>");
+         Ok(())
+     }
+ 
+@@ -140,6 +151,21 @@ impl Gitminer {
+         Ok(format!("{} <{}>", name, email))
+     }
+ 
++    fn load_gnostr_relays(repo: &git2::Repository) -> Result<String, &'static str> {
++        let cfg = match repo.config() {
++            Ok(c)  => c,
++            Err(_) => { return Err("Failed to load git config"); }
++        };
++
++        let relays  = match cfg.get_string("gnostr.relays") {
++            Ok(s)  => s,
++            Err(_) => { return Err("Failed to find git user name"); }
++        };
++
++
++        Ok(format!("{}", relays))
++    }
++
+     fn revparse_0(repo: &mut git2::Repository) -> Result<(String), &'static str> {
+         Gitminer::ensure_no_unstaged_changes(repo)?;
+ 
diff --git a/.gnostr/blobs/000006a544ffc9a0f6dcd577ad937c726e2b3f84 b/.gnostr/blobs/000006a544ffc9a0f6dcd577ad937c726e2b3f84
new file mode 100644
index 00000000..85dd38d
--- /dev/null
+++ b/.gnostr/blobs/000006a544ffc9a0f6dcd577ad937c726e2b3f84
@@ -0,0 +1,5 @@
+commit 000006a544ffc9a0f6dcd577ad937c726e2b3f84
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 12:57:53 2023 -0400
+
+    01:00014565:
diff --git a/.gnostr/blobs/00000b5a20020afd4c06899b2ebd7ed6cb05d28f b/.gnostr/blobs/00000b5a20020afd4c06899b2ebd7ed6cb05d28f
new file mode 100644
index 00000000..a9d4506
--- /dev/null
+++ b/.gnostr/blobs/00000b5a20020afd4c06899b2ebd7ed6cb05d28f
@@ -0,0 +1,46 @@
+commit 00000b5a20020afd4c06899b2ebd7ed6cb05d28f
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 13:01:58 2023 -0400
+
+    03:000adcc4:src/gitminer.rs: fix error messages for git config
+
+diff --git a/src/gitminer.rs b/src/gitminer.rs
+index f2efe53..46d53e5 100644
+--- a/src/gitminer.rs
++++ b/src/gitminer.rs
+@@ -135,17 +135,17 @@ impl Gitminer {
+     fn load_author(repo: &git2::Repository) -> Result<String, &'static str> {
+         let cfg = match repo.config() {
+             Ok(c)  => c,
+-            Err(_) => { return Err("Failed to load git config"); }
++            Err(_) => { return Err("Failed to load git config user.name"); }
+         };
+ 
+         let name  = match cfg.get_string("user.name") {
+             Ok(s)  => s,
+-            Err(_) => { return Err("Failed to find git user name"); }
++            Err(_) => { return Err("Failed to find git config user.name"); }
+         };
+ 
+         let email = match cfg.get_string("user.email") {
+             Ok(s)  => s,
+-            Err(_) => { return Err("Failed to find git email address"); }
++            Err(_) => { return Err("Failed to find git config user.email"); }
+         };
+ 
+         Ok(format!("{} <{}>", name, email))
+@@ -154,12 +154,12 @@ impl Gitminer {
+     fn load_gnostr_relays(repo: &git2::Repository) -> Result<String, &'static str> {
+         let cfg = match repo.config() {
+             Ok(c)  => c,
+-            Err(_) => { return Err("Failed to load git config"); }
++            Err(_) => { return Err("Failed to load git config gnostr.relays"); }
+         };
+ 
+         let relays  = match cfg.get_string("gnostr.relays") {
+             Ok(s)  => s,
+-            Err(_) => { return Err("Failed to find git user name"); }
++            Err(_) => { return Err("Failed to find git config gnostr.relays"); }
+         };
+ 
+ 
