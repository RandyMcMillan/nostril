commit 00000568b8bf31f68bb1ca992f52d23cb4d8e999
Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
Date:   Sun Jul 16 12:57:40 2023 -0400

    02:00000ceb:struct Gitminer add relays

diff --git a/src/gitminer.rs b/src/gitminer.rs
index f330ca2..f2efe53 100644
--- a/src/gitminer.rs
+++ b/src/gitminer.rs
@@ -13,13 +13,14 @@ pub struct Options {
     pub target:    String,
     pub message:   String,
     pub repo:      String,
-    pub timestamp: time::Tm,
+    pub timestamp: time::Tm
 }
 
 pub struct Gitminer {
     opts:   Options,
     repo:   git2::Repository,
-    author: String
+    author: String,
+    pub relays: String
 }
 
 
@@ -32,11 +33,13 @@ impl Gitminer {
         };
 
         let author = Gitminer::load_author(&repo)?;
+        let relays = Gitminer::load_gnostr_relays(&repo)?;
 
         Ok(Gitminer {
             opts:   opts,
             repo:   repo,
-            author: author
+            author: author,
+            relays: relays
         })
     }
 
@@ -105,18 +108,26 @@ impl Gitminer {
         //write the blob
         Command::new("sh")
             .arg("-c")
-            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+            .arg(format!("cd {} && mkdir -p .gnostr && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
             .output()
             .ok()
             .expect("Failed to write .gnostr/blobs/<hash>");
         //add the blob
         //Command::new("sh")
         //    .arg("-c")
-        //    .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
+        //    .arg(format!("cd {} && mkdir -p .gnostr/blobs && git add .gnostr/blobs/{}", self.opts.repo, hash))
         //    .output()
         //    .ok()
         //    .expect("Failed to git add .gnostr/blobs/<hash>");
-
+//REF:
+//gnostr-git reflog      --format='wss://${RELAY}/${REPO}/%C(auto)%H/%<|(17)%gdcommit:%s'
+        //write the reflog
+        Command::new("sh")
+            .arg("-c")
+            .arg(format!("cd {} && mkdir -p .gnostr/reflog && touch -f .gnostr/reflog/{} && git reflog --format='wss://{}/{}/%C(auto)%H/%<|(17)%gdcommit:%s' > .gnostr/reflog/{}", self.relays, self.opts.repo,self.opts.repo, hash, hash))
+            .output()
+            .ok()
+            .expect("Failed to write .gnostr/reflog/<hash>");
         Ok(())
     }
 
@@ -140,6 +151,21 @@ impl Gitminer {
         Ok(format!("{} <{}>", name, email))
     }
 
+    fn load_gnostr_relays(repo: &git2::Repository) -> Result<String, &'static str> {
+        let cfg = match repo.config() {
+            Ok(c)  => c,
+            Err(_) => { return Err("Failed to load git config"); }
+        };
+
+        let relays  = match cfg.get_string("gnostr.relays") {
+            Ok(s)  => s,
+            Err(_) => { return Err("Failed to find git user name"); }
+        };
+
+
+        Ok(format!("{}", relays))
+    }
+
     fn revparse_0(repo: &mut git2::Repository) -> Result<(String), &'static str> {
         Gitminer::ensure_no_unstaged_changes(repo)?;
 
