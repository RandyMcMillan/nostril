commit 00000039472a15dac7401d3726f55f9f36d23a2b
Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
Date:   Sun Jul 16 11:07:36 2023 -0400

    01:0007836b:gnostr-legit: blob creation

diff --git a/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
new file mode 100644
index 00000000..a99f552
--- /dev/null
+++ b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
@@ -0,0 +1,34 @@
+commit 00000074d9f399f76a45b9eb89c03941630359aa
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 09:50:00 2023 -0400
+
+    01:000cf4e5:
+
+diff --git a/src/main.rs b/src/main.rs
+index 4838731..fe319ac 100644
+--- a/src/main.rs
++++ b/src/main.rs
+@@ -70,20 +70,20 @@ fn main() -> io::Result<()> {
+         if cfg!(target_os = "macos"){
+         Command::new("sh")
+                 .arg("-c")
+-                .arg("git diff")
++                .arg("gnostr-git diff")
+                 .output()
+                 .expect("failed to execute process")
+         } else
+         if cfg!(target_os = "linux"){
+         Command::new("sh")
+                 .arg("-c")
+-                .arg("git diff")
++                .arg("gnostr-git diff")
+                 .output()
+                 .expect("failed to execute process")
+         } else {
+         Command::new("sh")
+                 .arg("-c")
+-                .arg("git diff")
++                .arg("gnostr-git diff")
+                 .output()
+                 .expect("failed to execute process")
+         };
diff --git a/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd b/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd
new file mode 100644
index 00000000..983ba80
--- /dev/null
+++ b/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd
@@ -0,0 +1,62 @@
+commit 0000008e6df519e8eeaea4e84929b857d9ea51fd
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:04:14 2023 -0400
+
+    00:00017ae2:write commit/blob
+
+diff --git a/src/gitminer.rs b/src/gitminer.rs
+index 21752ac..d5f5f56 100644
+--- a/src/gitminer.rs
++++ b/src/gitminer.rs
+@@ -79,7 +79,12 @@ impl Gitminer {
+             .expect("Failed to generate commit");
+ 
+         /* repo.blob() generates a blob, not a commit.
+-         * don't know if there's a way to do this with libgit2. */
++         * we write the commit, then
++         * we use the tmpfile to create .gnostr/blobs/<hash>
++         * we 'git show' the mined tmpfile
++         * and pipe it into the .gnostr/blobs/<hash>
++         */
++
+         let tmpfile  = format!("/tmp/{}.tmp",hash);
+         let mut file = File::create(&Path::new(&tmpfile))
+             .ok()
+@@ -89,6 +94,7 @@ impl Gitminer {
+             .ok()
+             .expect(&format!("Failed to write temporary file {}", &tmpfile));
+ 
++        //write the commit
+         Command::new("sh")
+             .arg("-c")
+             .arg(format!("cd {} && git hash-object -t commit -w --stdin < {} && git reset --hard {}", self.opts.repo, tmpfile, hash))
+@@ -96,21 +102,20 @@ impl Gitminer {
+             .ok()
+             .expect("Failed to generate commit");
+ 
++        //write the blob
+         Command::new("sh")
+             .arg("-c")
+             .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+             .output()
+             .ok()
+             .expect("Failed to write .gnostr/blobs/<hash>");
+-
+-
+-///
+-//        Command::new("sh")
+-//            .arg("-c")
+-//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
+-//            .output()
+-//            .ok()
+-//            .expect("Failed to generate commit");
++        //add the blob
++        Command::new("sh")
++            .arg("-c")
++            .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
++            .output()
++            .ok()
++            .expect("Failed to git add .gnostr/blobs/<hash>");
+ 
+         Ok(())
+     }
diff --git a/.gnostr/blobs/000002a2c2aa1f41ecaec4c9b81e8795a8cad360 b/.gnostr/blobs/000002a2c2aa1f41ecaec4c9b81e8795a8cad360
new file mode 100644
index 00000000..ff91850
--- /dev/null
+++ b/.gnostr/blobs/000002a2c2aa1f41ecaec4c9b81e8795a8cad360
@@ -0,0 +1,278 @@
+commit 000002a2c2aa1f41ecaec4c9b81e8795a8cad360
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:20:30 2023 -0400
+
+    01:000181a8:
+
+diff --git a/.gnostr/blobs/000002aa3b76cdae5ee274921cdbfbc2de87f31d b/.gnostr/blobs/000002aa3b76cdae5ee274921cdbfbc2de87f31d
+new file mode 100644
+index 00000000..ae065f6
+--- /dev/null
++++ b/.gnostr/blobs/000002aa3b76cdae5ee274921cdbfbc2de87f31d
+@@ -0,0 +1,5 @@
++commit 000002aa3b76cdae5ee274921cdbfbc2de87f31d
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 10:14:28 2023 -0400
++
++    03:0000aed2:write commit/blob
+diff --git a/.gnostr/blobs/00000515f6b7dedc33041e6d58feacede0131d8c b/.gnostr/blobs/00000515f6b7dedc33041e6d58feacede0131d8c
+new file mode 100644
+index 00000000..fd057c6
+--- /dev/null
++++ b/.gnostr/blobs/00000515f6b7dedc33041e6d58feacede0131d8c
+@@ -0,0 +1,5 @@
++commit 00000515f6b7dedc33041e6d58feacede0131d8c
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 10:15:55 2023 -0400
++
++    03:00001363:write commit/blob
+diff --git a/.gnostr/blobs/00000682c0a4c81e0f3bc92798fc18e7ff857b6f b/.gnostr/blobs/00000682c0a4c81e0f3bc92798fc18e7ff857b6f
+new file mode 100644
+index 00000000..f551ff3
+--- /dev/null
++++ b/.gnostr/blobs/00000682c0a4c81e0f3bc92798fc18e7ff857b6f
+@@ -0,0 +1,5 @@
++commit 00000682c0a4c81e0f3bc92798fc18e7ff857b6f
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 10:15:09 2023 -0400
++
++    02:0001457a:write commit/blob
+diff --git a/.gnostr/blobs/0000073f9f6f0d2dc6a112f2b503a3ae5f7e3159 b/.gnostr/blobs/0000073f9f6f0d2dc6a112f2b503a3ae5f7e3159
+new file mode 100644
+index 00000000..80b6bb5
+--- /dev/null
++++ b/.gnostr/blobs/0000073f9f6f0d2dc6a112f2b503a3ae5f7e3159
+@@ -0,0 +1,233 @@
++commit 0000073f9f6f0d2dc6a112f2b503a3ae5f7e3159
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 10:10:16 2023 -0400
++
++    01:00047fde:write commit/blob
++
++diff --git a/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd b/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd
++new file mode 100644
++index 00000000..c1b5e40
++--- /dev/null
+++++ b/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd
++@@ -0,0 +1,198 @@
+++commit 00000e71b4ebde34983b1f82af993c488087e4fd
+++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+++Date:   Sun Jul 16 10:06:48 2023 -0400
+++
+++    03:0002be4b:
+++
+++diff --git a/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd b/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd
+++new file mode 100644
+++index 00000000..983ba80
+++--- /dev/null
++++++ b/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd
+++@@ -0,0 +1,62 @@
++++commit 0000008e6df519e8eeaea4e84929b857d9ea51fd
++++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++++Date:   Sun Jul 16 10:04:14 2023 -0400
++++
++++    00:00017ae2:write commit/blob
++++
++++diff --git a/src/gitminer.rs b/src/gitminer.rs
++++index 21752ac..d5f5f56 100644
++++--- a/src/gitminer.rs
+++++++ b/src/gitminer.rs
++++@@ -79,7 +79,12 @@ impl Gitminer {
++++             .expect("Failed to generate commit");
++++ 
++++         /* repo.blob() generates a blob, not a commit.
++++-         * don't know if there's a way to do this with libgit2. */
+++++         * we write the commit, then
+++++         * we use the tmpfile to create .gnostr/blobs/<hash>
+++++         * we 'git show' the mined tmpfile
+++++         * and pipe it into the .gnostr/blobs/<hash>
+++++         */
+++++
++++         let tmpfile  = format!("/tmp/{}.tmp",hash);
++++         let mut file = File::create(&Path::new(&tmpfile))
++++             .ok()
++++@@ -89,6 +94,7 @@ impl Gitminer {
++++             .ok()
++++             .expect(&format!("Failed to write temporary file {}", &tmpfile));
++++ 
+++++        //write the commit
++++         Command::new("sh")
++++             .arg("-c")
++++             .arg(format!("cd {} && git hash-object -t commit -w --stdin < {} && git reset --hard {}", self.opts.repo, tmpfile, hash))
++++@@ -96,21 +102,20 @@ impl Gitminer {
++++             .ok()
++++             .expect("Failed to generate commit");
++++ 
+++++        //write the blob
++++         Command::new("sh")
++++             .arg("-c")
++++             .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
++++             .output()
++++             .ok()
++++             .expect("Failed to write .gnostr/blobs/<hash>");
++++-
++++-
++++-///
++++-//        Command::new("sh")
++++-//            .arg("-c")
++++-//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++++-//            .output()
++++-//            .ok()
++++-//            .expect("Failed to generate commit");
+++++        //add the blob
+++++        Command::new("sh")
+++++            .arg("-c")
+++++            .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
+++++            .output()
+++++            .ok()
+++++            .expect("Failed to git add .gnostr/blobs/<hash>");
++++ 
++++         Ok(())
++++     }
+++diff --git a/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924 b/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924
+++new file mode 100644
+++index 00000000..ffd747f
+++--- /dev/null
++++++ b/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924
+++@@ -0,0 +1,5 @@
++++commit 0000082d1609c0c2bbd8b894fc826fc78fd0b924
++++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++++Date:   Sun Jul 16 10:05:55 2023 -0400
++++
++++    03:0000392c:write commit/blob
+++diff --git a/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3 b/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3
+++new file mode 100644
+++index 00000000..b426533
+++--- /dev/null
++++++ b/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3
+++@@ -0,0 +1,107 @@
++++commit 00000c7bba1862e00767cdec5e8cd84ee55f05d3
++++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++++Date:   Sun Jul 16 09:51:48 2023 -0400
++++
++++    02:0000c300:
++++
++++diff --git a/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
++++new file mode 100644
++++index 00000000..a99f552
++++--- /dev/null
+++++++ b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
++++@@ -0,0 +1,34 @@
+++++commit 00000074d9f399f76a45b9eb89c03941630359aa
+++++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+++++Date:   Sun Jul 16 09:50:00 2023 -0400
+++++
+++++    01:000cf4e5:
+++++
+++++diff --git a/src/main.rs b/src/main.rs
+++++index 4838731..fe319ac 100644
+++++--- a/src/main.rs
++++++++ b/src/main.rs
+++++@@ -70,20 +70,20 @@ fn main() -> io::Result<()> {
+++++         if cfg!(target_os = "macos"){
+++++         Command::new("sh")
+++++                 .arg("-c")
+++++-                .arg("git diff")
++++++                .arg("gnostr-git diff")
+++++                 .output()
+++++                 .expect("failed to execute process")
+++++         } else
+++++         if cfg!(target_os = "linux"){
+++++         Command::new("sh")
+++++                 .arg("-c")
+++++-                .arg("git diff")
++++++                .arg("gnostr-git diff")
+++++                 .output()
+++++                 .expect("failed to execute process")
+++++         } else {
+++++         Command::new("sh")
+++++                 .arg("-c")
+++++-                .arg("git diff")
++++++                .arg("gnostr-git diff")
+++++                 .output()
+++++                 .expect("failed to execute process")
+++++         };
++++diff --git a/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573 b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
++++new file mode 100644
++++index 00000000..b2bb142
++++--- /dev/null
+++++++ b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
++++@@ -0,0 +1,55 @@
+++++commit 0000085d0d6bb7e9de0e3e87c28e27b439be4573
+++++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+++++Date:   Sun Jul 16 09:43:30 2023 -0400
+++++
+++++    03:0005164a:
+++++
+++++diff --git a/src/gitminer.rs b/src/gitminer.rs
+++++index 18c4c71..21752ac 100644
+++++--- a/src/gitminer.rs
++++++++ b/src/gitminer.rs
+++++@@ -70,9 +70,17 @@ impl Gitminer {
+++++     }
+++++ 
+++++     fn write_commit(&self, hash: &String, blob: &String) -> Result<(), &'static str> {
++++++
++++++        Command::new("sh")
++++++            .arg("-c")
++++++            .arg(format!("mkdir -p {}.gnostr/{} && ", self.opts.repo, hash))
++++++            .output()
++++++            .ok()
++++++            .expect("Failed to generate commit");
++++++
+++++         /* repo.blob() generates a blob, not a commit.
+++++          * don't know if there's a way to do this with libgit2. */
+++++-        let tmpfile  = format!("/tmp/{}.tmp", hash);
++++++        let tmpfile  = format!("/tmp/{}.tmp",hash);
+++++         let mut file = File::create(&Path::new(&tmpfile))
+++++             .ok()
+++++             .expect(&format!("Failed to create temporary file {}", &tmpfile));
+++++@@ -87,13 +95,22 @@ impl Gitminer {
+++++             .output()
+++++             .ok()
+++++             .expect("Failed to generate commit");
+++++-//
++++++
+++++         Command::new("sh")
+++++             .arg("-c")
+++++-            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++++++            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+++++             .output()
+++++             .ok()
+++++-            .expect("Failed to generate commit");
++++++            .expect("Failed to write .gnostr/blobs/<hash>");
++++++
++++++
++++++///
++++++//        Command::new("sh")
++++++//            .arg("-c")
++++++//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++++++//            .output()
++++++//            .ok()
++++++//            .expect("Failed to generate commit");
+++++ 
+++++         Ok(())
+++++     }
++diff --git a/src/gitminer.rs b/src/gitminer.rs
++index d5f5f56..f330ca2 100644
++--- a/src/gitminer.rs
+++++ b/src/gitminer.rs
++@@ -110,12 +110,12 @@ impl Gitminer {
++             .ok()
++             .expect("Failed to write .gnostr/blobs/<hash>");
++         //add the blob
++-        Command::new("sh")
++-            .arg("-c")
++-            .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
++-            .output()
++-            .ok()
++-            .expect("Failed to git add .gnostr/blobs/<hash>");
+++        //Command::new("sh")
+++        //    .arg("-c")
+++        //    .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
+++        //    .output()
+++        //    .ok()
+++        //    .expect("Failed to git add .gnostr/blobs/<hash>");
++ 
++         Ok(())
++     }
diff --git a/.gnostr/blobs/000002aa3b76cdae5ee274921cdbfbc2de87f31d b/.gnostr/blobs/000002aa3b76cdae5ee274921cdbfbc2de87f31d
new file mode 100644
index 00000000..ae065f6
--- /dev/null
+++ b/.gnostr/blobs/000002aa3b76cdae5ee274921cdbfbc2de87f31d
@@ -0,0 +1,5 @@
+commit 000002aa3b76cdae5ee274921cdbfbc2de87f31d
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:14:28 2023 -0400
+
+    03:0000aed2:write commit/blob
diff --git a/.gnostr/blobs/00000515f6b7dedc33041e6d58feacede0131d8c b/.gnostr/blobs/00000515f6b7dedc33041e6d58feacede0131d8c
new file mode 100644
index 00000000..fd057c6
--- /dev/null
+++ b/.gnostr/blobs/00000515f6b7dedc33041e6d58feacede0131d8c
@@ -0,0 +1,5 @@
+commit 00000515f6b7dedc33041e6d58feacede0131d8c
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:15:55 2023 -0400
+
+    03:00001363:write commit/blob
diff --git a/.gnostr/blobs/00000682c0a4c81e0f3bc92798fc18e7ff857b6f b/.gnostr/blobs/00000682c0a4c81e0f3bc92798fc18e7ff857b6f
new file mode 100644
index 00000000..f551ff3
--- /dev/null
+++ b/.gnostr/blobs/00000682c0a4c81e0f3bc92798fc18e7ff857b6f
@@ -0,0 +1,5 @@
+commit 00000682c0a4c81e0f3bc92798fc18e7ff857b6f
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:15:09 2023 -0400
+
+    02:0001457a:write commit/blob
diff --git a/.gnostr/blobs/0000073f9f6f0d2dc6a112f2b503a3ae5f7e3159 b/.gnostr/blobs/0000073f9f6f0d2dc6a112f2b503a3ae5f7e3159
new file mode 100644
index 00000000..80b6bb5
--- /dev/null
+++ b/.gnostr/blobs/0000073f9f6f0d2dc6a112f2b503a3ae5f7e3159
@@ -0,0 +1,233 @@
+commit 0000073f9f6f0d2dc6a112f2b503a3ae5f7e3159
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:10:16 2023 -0400
+
+    01:00047fde:write commit/blob
+
+diff --git a/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd b/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd
+new file mode 100644
+index 00000000..c1b5e40
+--- /dev/null
++++ b/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd
+@@ -0,0 +1,198 @@
++commit 00000e71b4ebde34983b1f82af993c488087e4fd
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 10:06:48 2023 -0400
++
++    03:0002be4b:
++
++diff --git a/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd b/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd
++new file mode 100644
++index 00000000..983ba80
++--- /dev/null
+++++ b/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd
++@@ -0,0 +1,62 @@
+++commit 0000008e6df519e8eeaea4e84929b857d9ea51fd
+++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+++Date:   Sun Jul 16 10:04:14 2023 -0400
+++
+++    00:00017ae2:write commit/blob
+++
+++diff --git a/src/gitminer.rs b/src/gitminer.rs
+++index 21752ac..d5f5f56 100644
+++--- a/src/gitminer.rs
++++++ b/src/gitminer.rs
+++@@ -79,7 +79,12 @@ impl Gitminer {
+++             .expect("Failed to generate commit");
+++ 
+++         /* repo.blob() generates a blob, not a commit.
+++-         * don't know if there's a way to do this with libgit2. */
++++         * we write the commit, then
++++         * we use the tmpfile to create .gnostr/blobs/<hash>
++++         * we 'git show' the mined tmpfile
++++         * and pipe it into the .gnostr/blobs/<hash>
++++         */
++++
+++         let tmpfile  = format!("/tmp/{}.tmp",hash);
+++         let mut file = File::create(&Path::new(&tmpfile))
+++             .ok()
+++@@ -89,6 +94,7 @@ impl Gitminer {
+++             .ok()
+++             .expect(&format!("Failed to write temporary file {}", &tmpfile));
+++ 
++++        //write the commit
+++         Command::new("sh")
+++             .arg("-c")
+++             .arg(format!("cd {} && git hash-object -t commit -w --stdin < {} && git reset --hard {}", self.opts.repo, tmpfile, hash))
+++@@ -96,21 +102,20 @@ impl Gitminer {
+++             .ok()
+++             .expect("Failed to generate commit");
+++ 
++++        //write the blob
+++         Command::new("sh")
+++             .arg("-c")
+++             .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+++             .output()
+++             .ok()
+++             .expect("Failed to write .gnostr/blobs/<hash>");
+++-
+++-
+++-///
+++-//        Command::new("sh")
+++-//            .arg("-c")
+++-//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
+++-//            .output()
+++-//            .ok()
+++-//            .expect("Failed to generate commit");
++++        //add the blob
++++        Command::new("sh")
++++            .arg("-c")
++++            .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
++++            .output()
++++            .ok()
++++            .expect("Failed to git add .gnostr/blobs/<hash>");
+++ 
+++         Ok(())
+++     }
++diff --git a/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924 b/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924
++new file mode 100644
++index 00000000..ffd747f
++--- /dev/null
+++++ b/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924
++@@ -0,0 +1,5 @@
+++commit 0000082d1609c0c2bbd8b894fc826fc78fd0b924
+++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+++Date:   Sun Jul 16 10:05:55 2023 -0400
+++
+++    03:0000392c:write commit/blob
++diff --git a/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3 b/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3
++new file mode 100644
++index 00000000..b426533
++--- /dev/null
+++++ b/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3
++@@ -0,0 +1,107 @@
+++commit 00000c7bba1862e00767cdec5e8cd84ee55f05d3
+++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+++Date:   Sun Jul 16 09:51:48 2023 -0400
+++
+++    02:0000c300:
+++
+++diff --git a/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
+++new file mode 100644
+++index 00000000..a99f552
+++--- /dev/null
++++++ b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
+++@@ -0,0 +1,34 @@
++++commit 00000074d9f399f76a45b9eb89c03941630359aa
++++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++++Date:   Sun Jul 16 09:50:00 2023 -0400
++++
++++    01:000cf4e5:
++++
++++diff --git a/src/main.rs b/src/main.rs
++++index 4838731..fe319ac 100644
++++--- a/src/main.rs
+++++++ b/src/main.rs
++++@@ -70,20 +70,20 @@ fn main() -> io::Result<()> {
++++         if cfg!(target_os = "macos"){
++++         Command::new("sh")
++++                 .arg("-c")
++++-                .arg("git diff")
+++++                .arg("gnostr-git diff")
++++                 .output()
++++                 .expect("failed to execute process")
++++         } else
++++         if cfg!(target_os = "linux"){
++++         Command::new("sh")
++++                 .arg("-c")
++++-                .arg("git diff")
+++++                .arg("gnostr-git diff")
++++                 .output()
++++                 .expect("failed to execute process")
++++         } else {
++++         Command::new("sh")
++++                 .arg("-c")
++++-                .arg("git diff")
+++++                .arg("gnostr-git diff")
++++                 .output()
++++                 .expect("failed to execute process")
++++         };
+++diff --git a/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573 b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
+++new file mode 100644
+++index 00000000..b2bb142
+++--- /dev/null
++++++ b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
+++@@ -0,0 +1,55 @@
++++commit 0000085d0d6bb7e9de0e3e87c28e27b439be4573
++++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++++Date:   Sun Jul 16 09:43:30 2023 -0400
++++
++++    03:0005164a:
++++
++++diff --git a/src/gitminer.rs b/src/gitminer.rs
++++index 18c4c71..21752ac 100644
++++--- a/src/gitminer.rs
+++++++ b/src/gitminer.rs
++++@@ -70,9 +70,17 @@ impl Gitminer {
++++     }
++++ 
++++     fn write_commit(&self, hash: &String, blob: &String) -> Result<(), &'static str> {
+++++
+++++        Command::new("sh")
+++++            .arg("-c")
+++++            .arg(format!("mkdir -p {}.gnostr/{} && ", self.opts.repo, hash))
+++++            .output()
+++++            .ok()
+++++            .expect("Failed to generate commit");
+++++
++++         /* repo.blob() generates a blob, not a commit.
++++          * don't know if there's a way to do this with libgit2. */
++++-        let tmpfile  = format!("/tmp/{}.tmp", hash);
+++++        let tmpfile  = format!("/tmp/{}.tmp",hash);
++++         let mut file = File::create(&Path::new(&tmpfile))
++++             .ok()
++++             .expect(&format!("Failed to create temporary file {}", &tmpfile));
++++@@ -87,13 +95,22 @@ impl Gitminer {
++++             .output()
++++             .ok()
++++             .expect("Failed to generate commit");
++++-//
+++++
++++         Command::new("sh")
++++             .arg("-c")
++++-            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
+++++            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
++++             .output()
++++             .ok()
++++-            .expect("Failed to generate commit");
+++++            .expect("Failed to write .gnostr/blobs/<hash>");
+++++
+++++
+++++///
+++++//        Command::new("sh")
+++++//            .arg("-c")
+++++//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
+++++//            .output()
+++++//            .ok()
+++++//            .expect("Failed to generate commit");
++++ 
++++         Ok(())
++++     }
+diff --git a/src/gitminer.rs b/src/gitminer.rs
+index d5f5f56..f330ca2 100644
+--- a/src/gitminer.rs
++++ b/src/gitminer.rs
+@@ -110,12 +110,12 @@ impl Gitminer {
+             .ok()
+             .expect("Failed to write .gnostr/blobs/<hash>");
+         //add the blob
+-        Command::new("sh")
+-            .arg("-c")
+-            .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
+-            .output()
+-            .ok()
+-            .expect("Failed to git add .gnostr/blobs/<hash>");
++        //Command::new("sh")
++        //    .arg("-c")
++        //    .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
++        //    .output()
++        //    .ok()
++        //    .expect("Failed to git add .gnostr/blobs/<hash>");
+ 
+         Ok(())
+     }
diff --git a/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924 b/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924
new file mode 100644
index 00000000..ffd747f
--- /dev/null
+++ b/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924
@@ -0,0 +1,5 @@
+commit 0000082d1609c0c2bbd8b894fc826fc78fd0b924
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:05:55 2023 -0400
+
+    03:0000392c:write commit/blob
diff --git a/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573 b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
new file mode 100644
index 00000000..b2bb142
--- /dev/null
+++ b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
@@ -0,0 +1,55 @@
+commit 0000085d0d6bb7e9de0e3e87c28e27b439be4573
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 09:43:30 2023 -0400
+
+    03:0005164a:
+
+diff --git a/src/gitminer.rs b/src/gitminer.rs
+index 18c4c71..21752ac 100644
+--- a/src/gitminer.rs
++++ b/src/gitminer.rs
+@@ -70,9 +70,17 @@ impl Gitminer {
+     }
+ 
+     fn write_commit(&self, hash: &String, blob: &String) -> Result<(), &'static str> {
++
++        Command::new("sh")
++            .arg("-c")
++            .arg(format!("mkdir -p {}.gnostr/{} && ", self.opts.repo, hash))
++            .output()
++            .ok()
++            .expect("Failed to generate commit");
++
+         /* repo.blob() generates a blob, not a commit.
+          * don't know if there's a way to do this with libgit2. */
+-        let tmpfile  = format!("/tmp/{}.tmp", hash);
++        let tmpfile  = format!("/tmp/{}.tmp",hash);
+         let mut file = File::create(&Path::new(&tmpfile))
+             .ok()
+             .expect(&format!("Failed to create temporary file {}", &tmpfile));
+@@ -87,13 +95,22 @@ impl Gitminer {
+             .output()
+             .ok()
+             .expect("Failed to generate commit");
+-//
++
+         Command::new("sh")
+             .arg("-c")
+-            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+             .output()
+             .ok()
+-            .expect("Failed to generate commit");
++            .expect("Failed to write .gnostr/blobs/<hash>");
++
++
++///
++//        Command::new("sh")
++//            .arg("-c")
++//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++//            .output()
++//            .ok()
++//            .expect("Failed to generate commit");
+ 
+         Ok(())
+     }
diff --git a/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3 b/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3
new file mode 100644
index 00000000..b426533
--- /dev/null
+++ b/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3
@@ -0,0 +1,107 @@
+commit 00000c7bba1862e00767cdec5e8cd84ee55f05d3
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 09:51:48 2023 -0400
+
+    02:0000c300:
+
+diff --git a/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
+new file mode 100644
+index 00000000..a99f552
+--- /dev/null
++++ b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
+@@ -0,0 +1,34 @@
++commit 00000074d9f399f76a45b9eb89c03941630359aa
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 09:50:00 2023 -0400
++
++    01:000cf4e5:
++
++diff --git a/src/main.rs b/src/main.rs
++index 4838731..fe319ac 100644
++--- a/src/main.rs
+++++ b/src/main.rs
++@@ -70,20 +70,20 @@ fn main() -> io::Result<()> {
++         if cfg!(target_os = "macos"){
++         Command::new("sh")
++                 .arg("-c")
++-                .arg("git diff")
+++                .arg("gnostr-git diff")
++                 .output()
++                 .expect("failed to execute process")
++         } else
++         if cfg!(target_os = "linux"){
++         Command::new("sh")
++                 .arg("-c")
++-                .arg("git diff")
+++                .arg("gnostr-git diff")
++                 .output()
++                 .expect("failed to execute process")
++         } else {
++         Command::new("sh")
++                 .arg("-c")
++-                .arg("git diff")
+++                .arg("gnostr-git diff")
++                 .output()
++                 .expect("failed to execute process")
++         };
+diff --git a/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573 b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
+new file mode 100644
+index 00000000..b2bb142
+--- /dev/null
++++ b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
+@@ -0,0 +1,55 @@
++commit 0000085d0d6bb7e9de0e3e87c28e27b439be4573
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 09:43:30 2023 -0400
++
++    03:0005164a:
++
++diff --git a/src/gitminer.rs b/src/gitminer.rs
++index 18c4c71..21752ac 100644
++--- a/src/gitminer.rs
+++++ b/src/gitminer.rs
++@@ -70,9 +70,17 @@ impl Gitminer {
++     }
++ 
++     fn write_commit(&self, hash: &String, blob: &String) -> Result<(), &'static str> {
+++
+++        Command::new("sh")
+++            .arg("-c")
+++            .arg(format!("mkdir -p {}.gnostr/{} && ", self.opts.repo, hash))
+++            .output()
+++            .ok()
+++            .expect("Failed to generate commit");
+++
++         /* repo.blob() generates a blob, not a commit.
++          * don't know if there's a way to do this with libgit2. */
++-        let tmpfile  = format!("/tmp/{}.tmp", hash);
+++        let tmpfile  = format!("/tmp/{}.tmp",hash);
++         let mut file = File::create(&Path::new(&tmpfile))
++             .ok()
++             .expect(&format!("Failed to create temporary file {}", &tmpfile));
++@@ -87,13 +95,22 @@ impl Gitminer {
++             .output()
++             .ok()
++             .expect("Failed to generate commit");
++-//
+++
++         Command::new("sh")
++             .arg("-c")
++-            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
+++            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
++             .output()
++             .ok()
++-            .expect("Failed to generate commit");
+++            .expect("Failed to write .gnostr/blobs/<hash>");
+++
+++
+++///
+++//        Command::new("sh")
+++//            .arg("-c")
+++//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
+++//            .output()
+++//            .ok()
+++//            .expect("Failed to generate commit");
++ 
++         Ok(())
++     }
diff --git a/.gnostr/blobs/00000d1e53ec65bbb00e049621417b35b3d72465 b/.gnostr/blobs/00000d1e53ec65bbb00e049621417b35b3d72465
new file mode 100644
index 00000000..f2599fd
--- /dev/null
+++ b/.gnostr/blobs/00000d1e53ec65bbb00e049621417b35b3d72465
@@ -0,0 +1,5 @@
+commit 00000d1e53ec65bbb00e049621417b35b3d72465
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:28:49 2023 -0400
+
+    02:0006dd99:
diff --git a/.gnostr/blobs/00000d2609554509f67e5c74c0145d5e0287f050 b/.gnostr/blobs/00000d2609554509f67e5c74c0145d5e0287f050
new file mode 100644
index 00000000..85ffc9f
--- /dev/null
+++ b/.gnostr/blobs/00000d2609554509f67e5c74c0145d5e0287f050
@@ -0,0 +1,5 @@
+commit 00000d2609554509f67e5c74c0145d5e0287f050
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:28:42 2023 -0400
+
+    00:00006c70:
diff --git a/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd b/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd
new file mode 100644
index 00000000..c1b5e40
--- /dev/null
+++ b/.gnostr/blobs/00000e71b4ebde34983b1f82af993c488087e4fd
@@ -0,0 +1,198 @@
+commit 00000e71b4ebde34983b1f82af993c488087e4fd
+Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+Date:   Sun Jul 16 10:06:48 2023 -0400
+
+    03:0002be4b:
+
+diff --git a/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd b/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd
+new file mode 100644
+index 00000000..983ba80
+--- /dev/null
++++ b/.gnostr/blobs/0000008e6df519e8eeaea4e84929b857d9ea51fd
+@@ -0,0 +1,62 @@
++commit 0000008e6df519e8eeaea4e84929b857d9ea51fd
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 10:04:14 2023 -0400
++
++    00:00017ae2:write commit/blob
++
++diff --git a/src/gitminer.rs b/src/gitminer.rs
++index 21752ac..d5f5f56 100644
++--- a/src/gitminer.rs
+++++ b/src/gitminer.rs
++@@ -79,7 +79,12 @@ impl Gitminer {
++             .expect("Failed to generate commit");
++ 
++         /* repo.blob() generates a blob, not a commit.
++-         * don't know if there's a way to do this with libgit2. */
+++         * we write the commit, then
+++         * we use the tmpfile to create .gnostr/blobs/<hash>
+++         * we 'git show' the mined tmpfile
+++         * and pipe it into the .gnostr/blobs/<hash>
+++         */
+++
++         let tmpfile  = format!("/tmp/{}.tmp",hash);
++         let mut file = File::create(&Path::new(&tmpfile))
++             .ok()
++@@ -89,6 +94,7 @@ impl Gitminer {
++             .ok()
++             .expect(&format!("Failed to write temporary file {}", &tmpfile));
++ 
+++        //write the commit
++         Command::new("sh")
++             .arg("-c")
++             .arg(format!("cd {} && git hash-object -t commit -w --stdin < {} && git reset --hard {}", self.opts.repo, tmpfile, hash))
++@@ -96,21 +102,20 @@ impl Gitminer {
++             .ok()
++             .expect("Failed to generate commit");
++ 
+++        //write the blob
++         Command::new("sh")
++             .arg("-c")
++             .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
++             .output()
++             .ok()
++             .expect("Failed to write .gnostr/blobs/<hash>");
++-
++-
++-///
++-//        Command::new("sh")
++-//            .arg("-c")
++-//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++-//            .output()
++-//            .ok()
++-//            .expect("Failed to generate commit");
+++        //add the blob
+++        Command::new("sh")
+++            .arg("-c")
+++            .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
+++            .output()
+++            .ok()
+++            .expect("Failed to git add .gnostr/blobs/<hash>");
++ 
++         Ok(())
++     }
+diff --git a/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924 b/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924
+new file mode 100644
+index 00000000..ffd747f
+--- /dev/null
++++ b/.gnostr/blobs/0000082d1609c0c2bbd8b894fc826fc78fd0b924
+@@ -0,0 +1,5 @@
++commit 0000082d1609c0c2bbd8b894fc826fc78fd0b924
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 10:05:55 2023 -0400
++
++    03:0000392c:write commit/blob
+diff --git a/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3 b/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3
+new file mode 100644
+index 00000000..b426533
+--- /dev/null
++++ b/.gnostr/blobs/00000c7bba1862e00767cdec5e8cd84ee55f05d3
+@@ -0,0 +1,107 @@
++commit 00000c7bba1862e00767cdec5e8cd84ee55f05d3
++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
++Date:   Sun Jul 16 09:51:48 2023 -0400
++
++    02:0000c300:
++
++diff --git a/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
++new file mode 100644
++index 00000000..a99f552
++--- /dev/null
+++++ b/.gnostr/blobs/00000074d9f399f76a45b9eb89c03941630359aa
++@@ -0,0 +1,34 @@
+++commit 00000074d9f399f76a45b9eb89c03941630359aa
+++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+++Date:   Sun Jul 16 09:50:00 2023 -0400
+++
+++    01:000cf4e5:
+++
+++diff --git a/src/main.rs b/src/main.rs
+++index 4838731..fe319ac 100644
+++--- a/src/main.rs
++++++ b/src/main.rs
+++@@ -70,20 +70,20 @@ fn main() -> io::Result<()> {
+++         if cfg!(target_os = "macos"){
+++         Command::new("sh")
+++                 .arg("-c")
+++-                .arg("git diff")
++++                .arg("gnostr-git diff")
+++                 .output()
+++                 .expect("failed to execute process")
+++         } else
+++         if cfg!(target_os = "linux"){
+++         Command::new("sh")
+++                 .arg("-c")
+++-                .arg("git diff")
++++                .arg("gnostr-git diff")
+++                 .output()
+++                 .expect("failed to execute process")
+++         } else {
+++         Command::new("sh")
+++                 .arg("-c")
+++-                .arg("git diff")
++++                .arg("gnostr-git diff")
+++                 .output()
+++                 .expect("failed to execute process")
+++         };
++diff --git a/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573 b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
++new file mode 100644
++index 00000000..b2bb142
++--- /dev/null
+++++ b/.gnostr/blobs/0000085d0d6bb7e9de0e3e87c28e27b439be4573
++@@ -0,0 +1,55 @@
+++commit 0000085d0d6bb7e9de0e3e87c28e27b439be4573
+++Author: @RandyMcMillan <randy.lee.mcmillan@gmail.com>
+++Date:   Sun Jul 16 09:43:30 2023 -0400
+++
+++    03:0005164a:
+++
+++diff --git a/src/gitminer.rs b/src/gitminer.rs
+++index 18c4c71..21752ac 100644
+++--- a/src/gitminer.rs
++++++ b/src/gitminer.rs
+++@@ -70,9 +70,17 @@ impl Gitminer {
+++     }
+++ 
+++     fn write_commit(&self, hash: &String, blob: &String) -> Result<(), &'static str> {
++++
++++        Command::new("sh")
++++            .arg("-c")
++++            .arg(format!("mkdir -p {}.gnostr/{} && ", self.opts.repo, hash))
++++            .output()
++++            .ok()
++++            .expect("Failed to generate commit");
++++
+++         /* repo.blob() generates a blob, not a commit.
+++          * don't know if there's a way to do this with libgit2. */
+++-        let tmpfile  = format!("/tmp/{}.tmp", hash);
++++        let tmpfile  = format!("/tmp/{}.tmp",hash);
+++         let mut file = File::create(&Path::new(&tmpfile))
+++             .ok()
+++             .expect(&format!("Failed to create temporary file {}", &tmpfile));
+++@@ -87,13 +95,22 @@ impl Gitminer {
+++             .output()
+++             .ok()
+++             .expect("Failed to generate commit");
+++-//
++++
+++         Command::new("sh")
+++             .arg("-c")
+++-            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++++            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+++             .output()
+++             .ok()
+++-            .expect("Failed to generate commit");
++++            .expect("Failed to write .gnostr/blobs/<hash>");
++++
++++
++++///
++++//        Command::new("sh")
++++//            .arg("-c")
++++//            .arg(format!("cd {} && git branch {}", self.opts.repo, hash))
++++//            .output()
++++//            .ok()
++++//            .expect("Failed to generate commit");
+++ 
+++         Ok(())
+++     }
diff --git a/Cargo.lock b/Cargo.lock
index f91e5cc..e274fa2 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -208,11 +208,12 @@ dependencies = [
 
 [[package]]
 name = "gnostr-legit"
-version = "0.2.4"
+version = "0.0.0"
 dependencies = [
  "argparse",
  "chrono",
  "git2",
+ "pad",
  "rust-crypto",
  "sha2",
  "time",
@@ -369,6 +370,15 @@ dependencies = [
  "vcpkg",
 ]
 
+[[package]]
+name = "pad"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d2ad9b889f1b12e0b9ee24db044b5129150d5eada288edc800f789928dc8c0e3"
+dependencies = [
+ "unicode-width",
+]
+
 [[package]]
 name = "percent-encoding"
 version = "2.2.0"
diff --git a/Cargo.toml b/Cargo.toml
index a6cd798..aac5784 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,10 +1,10 @@
 [package]
 name    = "gnostr-legit"
-version = "0.2.4"
+version = "0.0.0"
 authors = ["@RandyMcMillan <randy.lee.mcmillan@gmail.com>", "John <john@throttle.io>"]
 edition = "2021"
 rust-version = "1.61.0"
-description = "add proof of work to a git commit"
+description = "gnostr blob manager and pow miner"
 documentation = "https://legit.gnostr.org"
 readme = "README.md"
 homepage = "https://legit.gnostr.org/"
@@ -21,4 +21,5 @@ argparse    = "0.2.2"
 time        = "0.1.42"
 chrono      = "0"
 sha2 = "0.10.7"
+pad = "0.1.6"
 #crypto      = "0.4.0"
diff --git a/GNUmakefile b/GNUmakefile
index 95ffa7a..824ef91 100644
--- a/GNUmakefile
+++ b/GNUmakefile
@@ -230,6 +230,7 @@ docs: touch-time git-add## 	docs
 
 .PHONY: legit
 .ONESHELL:
+install:legit-install
 legit:## 	legit
 	@$(MAKE) -f legit.mk
 tag:
diff --git a/src/gitminer.rs b/src/gitminer.rs
index f7cc3d1..f330ca2 100644
--- a/src/gitminer.rs
+++ b/src/gitminer.rs
@@ -70,9 +70,22 @@ impl Gitminer {
     }
 
     fn write_commit(&self, hash: &String, blob: &String) -> Result<(), &'static str> {
+
+        Command::new("sh")
+            .arg("-c")
+            .arg(format!("mkdir -p {}.gnostr/{} && ", self.opts.repo, hash))
+            .output()
+            .ok()
+            .expect("Failed to generate commit");
+
         /* repo.blob() generates a blob, not a commit.
-         * don't know if there's a way to do this with libgit2. */
-        let tmpfile  = format!("/tmp/{}.tmp", hash);
+         * we write the commit, then
+         * we use the tmpfile to create .gnostr/blobs/<hash>
+         * we 'git show' the mined tmpfile
+         * and pipe it into the .gnostr/blobs/<hash>
+         */
+
+        let tmpfile  = format!("/tmp/{}.tmp",hash);
         let mut file = File::create(&Path::new(&tmpfile))
             .ok()
             .expect(&format!("Failed to create temporary file {}", &tmpfile));
@@ -81,6 +94,7 @@ impl Gitminer {
             .ok()
             .expect(&format!("Failed to write temporary file {}", &tmpfile));
 
+        //write the commit
         Command::new("sh")
             .arg("-c")
             .arg(format!("cd {} && git hash-object -t commit -w --stdin < {} && git reset --hard {}", self.opts.repo, tmpfile, hash))
@@ -88,6 +102,21 @@ impl Gitminer {
             .ok()
             .expect("Failed to generate commit");
 
+        //write the blob
+        Command::new("sh")
+            .arg("-c")
+            .arg(format!("cd {} && touch -f .gnostr/blobs/{} && git show {} > .gnostr/blobs/{}", self.opts.repo, hash, hash, hash))
+            .output()
+            .ok()
+            .expect("Failed to write .gnostr/blobs/<hash>");
+        //add the blob
+        //Command::new("sh")
+        //    .arg("-c")
+        //    .arg(format!("cd {} && git add .gnostr/blobs/{}", self.opts.repo, hash))
+        //    .output()
+        //    .ok()
+        //    .expect("Failed to git add .gnostr/blobs/<hash>");
+
         Ok(())
     }
 
@@ -111,6 +140,22 @@ impl Gitminer {
         Ok(format!("{} <{}>", name, email))
     }
 
+    fn revparse_0(repo: &mut git2::Repository) -> Result<(String), &'static str> {
+        Gitminer::ensure_no_unstaged_changes(repo)?;
+
+        let head   = repo.revparse_single("HEAD").unwrap();
+        let head_2 = format!("{}", head.id());
+
+        Ok((head_2))
+    }
+    fn revparse_1(repo: &mut git2::Repository) -> Result<(String), &'static str> {
+        Gitminer::ensure_no_unstaged_changes(repo)?;
+
+        let head   = repo.revparse_single("HEAD~1").unwrap();
+        let head_1 = format!("{}", head.id());
+
+        Ok((head_1))
+    }
     fn prepare_tree(repo: &mut git2::Repository) -> Result<(String, String), &'static str> {
         Gitminer::ensure_no_unstaged_changes(repo)?;
 
diff --git a/src/main.rs b/src/main.rs
index 454a6d6..fe319ac 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -17,6 +17,7 @@ use argparse::{ArgumentParser,Store};
 use gitminer::Gitminer;
 use git2::*;
 use sha2::{Sha256, Digest};
+use pad::{PadStr, Alignment};
 
 mod worker;
 mod gitminer;
@@ -59,15 +60,30 @@ fn main() -> io::Result<()> {
 
     //println!("clean {:?}", repo.state());
 
-    let repo_state = if cfg!(target_os = "windows") {
+    let repo_state =
+        if cfg!(target_os = "windows") {
         Command::new("cmd")
                 .args(["/C", "git status"])
                 .output()
                 .expect("failed to execute process")
+        } else
+        if cfg!(target_os = "macos"){
+        Command::new("sh")
+                .arg("-c")
+                .arg("gnostr-git diff")
+                .output()
+                .expect("failed to execute process")
+        } else
+        if cfg!(target_os = "linux"){
+        Command::new("sh")
+                .arg("-c")
+                .arg("gnostr-git diff")
+                .output()
+                .expect("failed to execute process")
         } else {
         Command::new("sh")
                 .arg("-c")
-                .arg("git status")
+                .arg("gnostr-git diff")
                 .output()
                 .expect("failed to execute process")
         };
@@ -82,14 +98,18 @@ fn main() -> io::Result<()> {
     assert!(count >= 1_usize);
     //println!("{}={}", type_of(count), (count as i32));
     //println!("{}={}", type_of(count), (count as i64));
-    let mut hasher = Sha256::new();
-    let data = b"Hello world!";
-    hasher.update(data);
-    // `update` can be called repeatedly and is generic over `AsRef<[u8]>`
-    hasher.update("String data");
-    // Note that calling `finalize()` consumes hasher
-    let hash = hasher.finalize();
-    println!("Binary hash: {:?}", hash);
+    //let mut hasher = Sha256::new();
+    //let data = b"Hello world!";
+    //hasher.update(data);
+    //// `update` can be called repeatedly and is generic over `AsRef<[u8]>`
+    //hasher.update("String data");
+    //// Note that calling `finalize()` consumes hasher
+    //let hash = hasher.finalize();
+    ////println!("Binary hash: {:?}", hash);
+    //println!("hash: {:?}", hash);
+    //println!("sha256 before write: {:x}", hash);
+    //println!("sha256 before write: {:X}", hash);
+
 
    let now = SystemTime::now();
 
@@ -106,20 +126,36 @@ fn main() -> io::Result<()> {
    //    }
    //}
 
-    let output = if cfg!(target_os = "windows") {
+
+    let output =
+        if cfg!(target_os = "windows") {
         Command::new("cmd")
-                .args(["/C", "echo hello"])
+                .args(["/C", "git status"])
                 .output()
                 .expect("failed to execute process")
-    } else {
+        } else
+        if cfg!(target_os = "macos"){
         Command::new("sh")
                 .arg("-c")
-                .arg("git status")
+                .arg("git diff")
                 .output()
                 .expect("failed to execute process")
-    };
+        } else
+        if cfg!(target_os = "linux"){
+        Command::new("sh")
+                .arg("-c")
+                .arg("git diff")
+                .output()
+                .expect("failed to execute process")
+        } else {
+        Command::new("sh")
+                .arg("-c")
+                .arg("git diff")
+                .output()
+                .expect("failed to execute process")
+        };
 
-    let utf8_string = String::from_utf8(output.stdout)
+    let message = String::from_utf8(output.stdout)
     .map_err(|non_utf8| String::from_utf8_lossy(non_utf8.as_bytes()).into_owned())
     .unwrap();
 
@@ -133,7 +169,7 @@ fn main() -> io::Result<()> {
         //part of the gnostr protocol
         //src/worker.rs adds the nonce
         //message: "gnostr".to_string(),
-        message: utf8_string,
+        message: message,
         //message: count.to_string(),
         //repo:    ".".to_string(),
         repo:    path.as_path().display().to_string(),
@@ -153,9 +189,97 @@ fn main() -> io::Result<()> {
         Err(e) => { panic!("Failed to generate commit: {}", e); }
     };
 
+    let mut hasher = Sha256::new();
+    hasher.update(&hash);
+    // `update` can be called repeatedly and is generic over `AsRef<[u8]>`
+    //hasher.update("String data");
+    // Note that calling `finalize()` consumes hasher
+    //let gnostr_sec = hasher.finalize();
+    let gnostr_sec: String = format!("{:X}", hasher.finalize());
+    //println!("Binary hash: {:?}", hash);
+    //println!("hash before: {:?}", hash);
+    //println!("hash after pad: {:?}", hash);
+    //println!("&hash before: {:?}", &hash);
+    //println!("&hash after pad: {:?}", &hash);
+    //println!("gnostr_sec before pad: {:?}", gnostr_sec);
+    //println!("gnostr_sec after pad: {:?}", gnostr_sec.pad(64, '0', Alignment::Right, true));
+    //println!("&gnostr_sec before pad: {:?}", &gnostr_sec);
+    //println!("&gnostr_sec after pad: {:?}", &gnostr_sec.pad(64, '0', Alignment::Right, true));
+
+
+
+    //let s = "12345".pad(64, '0', Alignment::Right, true);
+    //println!("s: {:?}", s);
+// echo "000000b64a065760e5441bf47f0571cb690b28fc" | openssl dgst -sha256 | sed 's/SHA2-256(stdin)= //g'
+//
+//
+//shell test
+    let touch =
+        Command::new("sh")
+                .args(["-c", "touch ", &hash])
+                .output()
+                .expect("failed to execute process");
+    let touch_event = String::from_utf8(touch.stdout)
+    .map_err(|non_utf8| String::from_utf8_lossy(non_utf8.as_bytes()).into_owned())
+    .unwrap();
+    let cat =
+        Command::new("sh")
+                .args(["-c", "touch ", &hash])
+                .output()
+                .expect("failed to execute process");
+    let cat_event = String::from_utf8(cat.stdout)
+    .map_err(|non_utf8| String::from_utf8_lossy(non_utf8.as_bytes()).into_owned())
+    .unwrap();
+//shell test
+    //git rev-parse --verify HEAD
+    let event =
+        if cfg!(target_os = "windows") {
+        Command::new("cmd")
+                .args(["/C", "gnostr --hash 0"])
+                .output()
+                .expect("failed to execute process")
+        } else
+        if cfg!(target_os = "macos"){
+        Command::new("sh")
+                .args(["-c", "gnostr --hash 0"])
+                .output()
+                .expect("failed to execute process")
+        } else
+        if cfg!(target_os = "linux"){
+        Command::new("sh")
+                .args(["-c", "gnostr --hash 0"])
+                .output()
+                .expect("failed to execute process")
+        } else {
+        Command::new("sh")
+                .args(["-c", "gnostr --hash 0"])
+                .output()
+                .expect("failed to execute process")
+        };
+
+    let gnostr_event = String::from_utf8(event.stdout)
+    .map_err(|non_utf8| String::from_utf8_lossy(non_utf8.as_bytes()).into_owned())
+    .unwrap();
+
+    //assert...
+    //echo gnostr|openssl dgst -sha256 | sed 's/SHA2-256(stdin)= //g'
+
+//gnostr-legit must only return a sha256 generated by the
+//recent commit hash
+//to enable nested commands
+//REF:
+//gnostr --hash $(gnostr legit . -p 00000 -m "git rev-parse --verify HEAD")
+//gnostr --sec $(gnostr --hash $(gnostr legit . -p 00000 -m "git rev-parse --verify HEAD"))
+//Example:
+//gnostr --sec $(gnostr --hash $(gnostr legit . -p 00000 -m "#gnostr will exist!")) --envelope --content "$(gnostr-git log -n 1)" | gnostr-cat -u wss://relay.damus.io
+    //
+    //
+    //
     let duration = time::get_time() - start;
-    println!("Success! Generated commit {} in {} seconds", hash, duration.num_seconds());
+    //println!("Success! Generated commit {} in {} seconds", hash, duration.num_seconds());
+    println!("{}", gnostr_event);
     Ok(())
+
 }
 
 fn parse_args_or_exit(opts: &mut gitminer::Options) {
